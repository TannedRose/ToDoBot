from zoneinfo import ZoneInfo

import httpx

from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State

import inline_button as ikb

from config import settings

from datetime import datetime


class AddTask(StatesGroup):
    title = State()
    category = State()
    date = State()


router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=ikb.menu)

@router.callback_query(F.data == "get_tasks")
async def get_tasks(cb: CallbackQuery):
    await cb.answer("")
    user_id = cb.from_user.id
    async with httpx.AsyncClient() as client:
        res = await client.get(f"{settings.API_URL}tasks/?user={user_id}")
        if res.status_code == 200:
            tasks = res.json()

            if not tasks:
                await cb.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return

            text = "\n\n".join(
                f"üìå <b>{t.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}</b>\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {t.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {str(t.get('created_at', '')[:16]).replace('T', ' ')}\n"
                f"–°—Ä–æ–∫: {str(t.get('due_date', '')[:16]).replace('T', ' ')}"
                for t in tasks
            )
            await cb.message.answer(text)
        else:
            await cb.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

@router.callback_query(F.data == "add_task")
async def add_task_name(cb: CallbackQuery, state:FSMContext):
    await cb.answer("")
    await cb.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    await state.set_state(AddTask.title)

@router.message(AddTask.title)
async def add_task_category(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddTask.category)
    await message.answer("üìÇ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–¥–∞—á–∏:")

@router.message(AddTask.category)
async def add_task_date(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(AddTask.date)
    await message.answer(" –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (YYYY-MM-DD HH:MM):")


@router.message(AddTask.date)
async def add_task(message: Message, state: FSMContext):
    try:
        due_date = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
    except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM")
            return
    data = await state.get_data()
    print(due_date.replace(tzinfo=ZoneInfo('America/Adak')))
    if due_date.replace(tzinfo=ZoneInfo('America/Adak')) < datetime.now(ZoneInfo('America/Adak')):
        await message.answer("‚ùå –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ –ø—Ä–æ—à–ª–æ–µ.")
    else:
        payload = {
            "title": data['title'],
            "category": data["category"],
            "due_date": due_date.isoformat(),
            "user": message.from_user.id,
        }
        async with httpx.AsyncClient() as client:
            await client.post(f"{settings.API_URL}tasks/", json=payload)

        await message.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!", reply_markup=ikb.menu)

